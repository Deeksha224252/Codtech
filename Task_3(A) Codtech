import java.io.*;
import java.net.*;
import java.util.*;

public class GuessingGameServer {
    private static final int PORT = 5000;
    private static final Set<PrintWriter> clientWriters = new HashSet<>();
    private static int targetNumber = new Random().nextInt(100) + 1;
    private static boolean gameWon = false;

    public static void main(String[] args) {
        System.out.println("Server started. Number chosen. Waiting for players...");
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                Socket clientSocket = serverSocket.accept();
                new ClientThread(clientSocket).start();
            }
        } catch (IOException e) {
            System.out.println("Server error: " + e.getMessage());
        }
    }

    static class ClientThread extends Thread {
        private Socket socket;
        private BufferedReader in;
        private PrintWriter out;

        public ClientThread(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try {
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);
                synchronized (clientWriters) {
                    clientWriters.add(out);
                }

                out.println("ðŸŽ¯ Welcome! Guess a number between 1 and 100.");

                String input;
                while ((input = in.readLine()) != null && !gameWon) {
                    try {
                        int guess = Integer.parseInt(input.trim());
                        if (guess < targetNumber) {
                            out.println("Too low. Try again.");
                        } else if (guess > targetNumber) {
                            out.println("Too high. Try again.");
                        } else {
                            out.println("ðŸŽ‰ Correct! You win!");
                            broadcast("ðŸŽ‰ Someone guessed correctly! The number was: " + targetNumber);
                            gameWon = true;
                        }
                    } catch (NumberFormatException e) {
                        out.println("Invalid input. Please enter a number.");
                    }
                }

            } catch (IOException e) {
                System.out.println("Client disconnected.");
            } finally {
                try {
                    socket.close();
                    synchronized (clientWriters) {
                        clientWriters.remove(out);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        private void broadcast(String message) {
            synchronized (clientWriters) {
                for (PrintWriter writer : clientWriters) {
                    writer.println(message);
                }
            }
        }
    }
}
